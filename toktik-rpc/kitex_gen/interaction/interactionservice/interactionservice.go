// Code generated by Kitex v0.6.2. DO NOT EDIT.

package interactionservice

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
	interaction "toktik-rpc/kitex_gen/interaction"
)

func serviceInfo() *kitex.ServiceInfo {
	return interactionServiceServiceInfo
}

var interactionServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "InteractionService"
	handlerType := (*interaction.InteractionService)(nil)
	methods := map[string]kitex.MethodInfo{
		"FollowSB":            kitex.NewMethodInfo(followSBHandler, newFollowSBArgs, newFollowSBResult, false),
		"FollowList":          kitex.NewMethodInfo(followListHandler, newFollowListArgs, newFollowListResult, false),
		"FansList":            kitex.NewMethodInfo(fansListHandler, newFansListArgs, newFansListResult, false),
		"FriendList":          kitex.NewMethodInfo(friendListHandler, newFriendListArgs, newFriendListResult, false),
		"IsFollowTarget":      kitex.NewMethodInfo(isFollowTargetHandler, newIsFollowTargetArgs, newIsFollowTargetResult, false),
		"IsFollowManyTargets": kitex.NewMethodInfo(isFollowManyTargetsHandler, newIsFollowManyTargetsArgs, newIsFollowManyTargetsResult, false),
		"IsFriend":            kitex.NewMethodInfo(isFriendHandler, newIsFriendArgs, newIsFriendResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "interaction",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func followSBHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(interaction.FollowActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(interaction.InteractionService).FollowSB(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *FollowSBArgs:
		success, err := handler.(interaction.InteractionService).FollowSB(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FollowSBResult)
		realResult.Success = success
	}
	return nil
}
func newFollowSBArgs() interface{} {
	return &FollowSBArgs{}
}

func newFollowSBResult() interface{} {
	return &FollowSBResult{}
}

type FollowSBArgs struct {
	Req *interaction.FollowActionRequest
}

func (p *FollowSBArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(interaction.FollowActionRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FollowSBArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FollowSBArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FollowSBArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in FollowSBArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *FollowSBArgs) Unmarshal(in []byte) error {
	msg := new(interaction.FollowActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FollowSBArgs_Req_DEFAULT *interaction.FollowActionRequest

func (p *FollowSBArgs) GetReq() *interaction.FollowActionRequest {
	if !p.IsSetReq() {
		return FollowSBArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FollowSBArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FollowSBArgs) GetFirstArgument() interface{} {
	return p.Req
}

type FollowSBResult struct {
	Success *interaction.FollowActionResponse
}

var FollowSBResult_Success_DEFAULT *interaction.FollowActionResponse

func (p *FollowSBResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(interaction.FollowActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FollowSBResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FollowSBResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FollowSBResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in FollowSBResult")
	}
	return proto.Marshal(p.Success)
}

func (p *FollowSBResult) Unmarshal(in []byte) error {
	msg := new(interaction.FollowActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FollowSBResult) GetSuccess() *interaction.FollowActionResponse {
	if !p.IsSetSuccess() {
		return FollowSBResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FollowSBResult) SetSuccess(x interface{}) {
	p.Success = x.(*interaction.FollowActionResponse)
}

func (p *FollowSBResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FollowSBResult) GetResult() interface{} {
	return p.Success
}

func followListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(interaction.FollowListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(interaction.InteractionService).FollowList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *FollowListArgs:
		success, err := handler.(interaction.InteractionService).FollowList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FollowListResult)
		realResult.Success = success
	}
	return nil
}
func newFollowListArgs() interface{} {
	return &FollowListArgs{}
}

func newFollowListResult() interface{} {
	return &FollowListResult{}
}

type FollowListArgs struct {
	Req *interaction.FollowListRequest
}

func (p *FollowListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(interaction.FollowListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FollowListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FollowListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FollowListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in FollowListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *FollowListArgs) Unmarshal(in []byte) error {
	msg := new(interaction.FollowListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FollowListArgs_Req_DEFAULT *interaction.FollowListRequest

func (p *FollowListArgs) GetReq() *interaction.FollowListRequest {
	if !p.IsSetReq() {
		return FollowListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FollowListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FollowListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type FollowListResult struct {
	Success *interaction.FollowListResponse
}

var FollowListResult_Success_DEFAULT *interaction.FollowListResponse

func (p *FollowListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(interaction.FollowListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FollowListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FollowListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FollowListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in FollowListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *FollowListResult) Unmarshal(in []byte) error {
	msg := new(interaction.FollowListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FollowListResult) GetSuccess() *interaction.FollowListResponse {
	if !p.IsSetSuccess() {
		return FollowListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FollowListResult) SetSuccess(x interface{}) {
	p.Success = x.(*interaction.FollowListResponse)
}

func (p *FollowListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FollowListResult) GetResult() interface{} {
	return p.Success
}

func fansListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(interaction.FansListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(interaction.InteractionService).FansList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *FansListArgs:
		success, err := handler.(interaction.InteractionService).FansList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FansListResult)
		realResult.Success = success
	}
	return nil
}
func newFansListArgs() interface{} {
	return &FansListArgs{}
}

func newFansListResult() interface{} {
	return &FansListResult{}
}

type FansListArgs struct {
	Req *interaction.FansListRequest
}

func (p *FansListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(interaction.FansListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FansListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FansListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FansListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in FansListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *FansListArgs) Unmarshal(in []byte) error {
	msg := new(interaction.FansListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FansListArgs_Req_DEFAULT *interaction.FansListRequest

func (p *FansListArgs) GetReq() *interaction.FansListRequest {
	if !p.IsSetReq() {
		return FansListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FansListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FansListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type FansListResult struct {
	Success *interaction.FansListResponse
}

var FansListResult_Success_DEFAULT *interaction.FansListResponse

func (p *FansListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(interaction.FansListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FansListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FansListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FansListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in FansListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *FansListResult) Unmarshal(in []byte) error {
	msg := new(interaction.FansListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FansListResult) GetSuccess() *interaction.FansListResponse {
	if !p.IsSetSuccess() {
		return FansListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FansListResult) SetSuccess(x interface{}) {
	p.Success = x.(*interaction.FansListResponse)
}

func (p *FansListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FansListResult) GetResult() interface{} {
	return p.Success
}

func friendListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(interaction.FriendListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(interaction.InteractionService).FriendList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *FriendListArgs:
		success, err := handler.(interaction.InteractionService).FriendList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FriendListResult)
		realResult.Success = success
	}
	return nil
}
func newFriendListArgs() interface{} {
	return &FriendListArgs{}
}

func newFriendListResult() interface{} {
	return &FriendListResult{}
}

type FriendListArgs struct {
	Req *interaction.FriendListRequest
}

func (p *FriendListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(interaction.FriendListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FriendListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FriendListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FriendListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in FriendListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *FriendListArgs) Unmarshal(in []byte) error {
	msg := new(interaction.FriendListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FriendListArgs_Req_DEFAULT *interaction.FriendListRequest

func (p *FriendListArgs) GetReq() *interaction.FriendListRequest {
	if !p.IsSetReq() {
		return FriendListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FriendListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FriendListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type FriendListResult struct {
	Success *interaction.FriendListResponse
}

var FriendListResult_Success_DEFAULT *interaction.FriendListResponse

func (p *FriendListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(interaction.FriendListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FriendListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FriendListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FriendListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in FriendListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *FriendListResult) Unmarshal(in []byte) error {
	msg := new(interaction.FriendListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FriendListResult) GetSuccess() *interaction.FriendListResponse {
	if !p.IsSetSuccess() {
		return FriendListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FriendListResult) SetSuccess(x interface{}) {
	p.Success = x.(*interaction.FriendListResponse)
}

func (p *FriendListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FriendListResult) GetResult() interface{} {
	return p.Success
}

func isFollowTargetHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(interaction.IsFollowTargetRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(interaction.InteractionService).IsFollowTarget(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *IsFollowTargetArgs:
		success, err := handler.(interaction.InteractionService).IsFollowTarget(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*IsFollowTargetResult)
		realResult.Success = success
	}
	return nil
}
func newIsFollowTargetArgs() interface{} {
	return &IsFollowTargetArgs{}
}

func newIsFollowTargetResult() interface{} {
	return &IsFollowTargetResult{}
}

type IsFollowTargetArgs struct {
	Req *interaction.IsFollowTargetRequest
}

func (p *IsFollowTargetArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(interaction.IsFollowTargetRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *IsFollowTargetArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *IsFollowTargetArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *IsFollowTargetArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in IsFollowTargetArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *IsFollowTargetArgs) Unmarshal(in []byte) error {
	msg := new(interaction.IsFollowTargetRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var IsFollowTargetArgs_Req_DEFAULT *interaction.IsFollowTargetRequest

func (p *IsFollowTargetArgs) GetReq() *interaction.IsFollowTargetRequest {
	if !p.IsSetReq() {
		return IsFollowTargetArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *IsFollowTargetArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IsFollowTargetArgs) GetFirstArgument() interface{} {
	return p.Req
}

type IsFollowTargetResult struct {
	Success *interaction.IsFollowTargetResponse
}

var IsFollowTargetResult_Success_DEFAULT *interaction.IsFollowTargetResponse

func (p *IsFollowTargetResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(interaction.IsFollowTargetResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *IsFollowTargetResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *IsFollowTargetResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *IsFollowTargetResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in IsFollowTargetResult")
	}
	return proto.Marshal(p.Success)
}

func (p *IsFollowTargetResult) Unmarshal(in []byte) error {
	msg := new(interaction.IsFollowTargetResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *IsFollowTargetResult) GetSuccess() *interaction.IsFollowTargetResponse {
	if !p.IsSetSuccess() {
		return IsFollowTargetResult_Success_DEFAULT
	}
	return p.Success
}

func (p *IsFollowTargetResult) SetSuccess(x interface{}) {
	p.Success = x.(*interaction.IsFollowTargetResponse)
}

func (p *IsFollowTargetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IsFollowTargetResult) GetResult() interface{} {
	return p.Success
}

func isFollowManyTargetsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(interaction.IsFollowManyTargetsRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(interaction.InteractionService).IsFollowManyTargets(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *IsFollowManyTargetsArgs:
		success, err := handler.(interaction.InteractionService).IsFollowManyTargets(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*IsFollowManyTargetsResult)
		realResult.Success = success
	}
	return nil
}
func newIsFollowManyTargetsArgs() interface{} {
	return &IsFollowManyTargetsArgs{}
}

func newIsFollowManyTargetsResult() interface{} {
	return &IsFollowManyTargetsResult{}
}

type IsFollowManyTargetsArgs struct {
	Req *interaction.IsFollowManyTargetsRequest
}

func (p *IsFollowManyTargetsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(interaction.IsFollowManyTargetsRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *IsFollowManyTargetsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *IsFollowManyTargetsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *IsFollowManyTargetsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in IsFollowManyTargetsArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *IsFollowManyTargetsArgs) Unmarshal(in []byte) error {
	msg := new(interaction.IsFollowManyTargetsRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var IsFollowManyTargetsArgs_Req_DEFAULT *interaction.IsFollowManyTargetsRequest

func (p *IsFollowManyTargetsArgs) GetReq() *interaction.IsFollowManyTargetsRequest {
	if !p.IsSetReq() {
		return IsFollowManyTargetsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *IsFollowManyTargetsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IsFollowManyTargetsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type IsFollowManyTargetsResult struct {
	Success *interaction.IsFollowManyTargetsResponse
}

var IsFollowManyTargetsResult_Success_DEFAULT *interaction.IsFollowManyTargetsResponse

func (p *IsFollowManyTargetsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(interaction.IsFollowManyTargetsResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *IsFollowManyTargetsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *IsFollowManyTargetsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *IsFollowManyTargetsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in IsFollowManyTargetsResult")
	}
	return proto.Marshal(p.Success)
}

func (p *IsFollowManyTargetsResult) Unmarshal(in []byte) error {
	msg := new(interaction.IsFollowManyTargetsResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *IsFollowManyTargetsResult) GetSuccess() *interaction.IsFollowManyTargetsResponse {
	if !p.IsSetSuccess() {
		return IsFollowManyTargetsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *IsFollowManyTargetsResult) SetSuccess(x interface{}) {
	p.Success = x.(*interaction.IsFollowManyTargetsResponse)
}

func (p *IsFollowManyTargetsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IsFollowManyTargetsResult) GetResult() interface{} {
	return p.Success
}

func isFriendHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(interaction.IsFriendRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(interaction.InteractionService).IsFriend(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *IsFriendArgs:
		success, err := handler.(interaction.InteractionService).IsFriend(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*IsFriendResult)
		realResult.Success = success
	}
	return nil
}
func newIsFriendArgs() interface{} {
	return &IsFriendArgs{}
}

func newIsFriendResult() interface{} {
	return &IsFriendResult{}
}

type IsFriendArgs struct {
	Req *interaction.IsFriendRequest
}

func (p *IsFriendArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(interaction.IsFriendRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *IsFriendArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *IsFriendArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *IsFriendArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in IsFriendArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *IsFriendArgs) Unmarshal(in []byte) error {
	msg := new(interaction.IsFriendRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var IsFriendArgs_Req_DEFAULT *interaction.IsFriendRequest

func (p *IsFriendArgs) GetReq() *interaction.IsFriendRequest {
	if !p.IsSetReq() {
		return IsFriendArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *IsFriendArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IsFriendArgs) GetFirstArgument() interface{} {
	return p.Req
}

type IsFriendResult struct {
	Success *interaction.IsFriendResponse
}

var IsFriendResult_Success_DEFAULT *interaction.IsFriendResponse

func (p *IsFriendResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(interaction.IsFriendResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *IsFriendResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *IsFriendResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *IsFriendResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in IsFriendResult")
	}
	return proto.Marshal(p.Success)
}

func (p *IsFriendResult) Unmarshal(in []byte) error {
	msg := new(interaction.IsFriendResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *IsFriendResult) GetSuccess() *interaction.IsFriendResponse {
	if !p.IsSetSuccess() {
		return IsFriendResult_Success_DEFAULT
	}
	return p.Success
}

func (p *IsFriendResult) SetSuccess(x interface{}) {
	p.Success = x.(*interaction.IsFriendResponse)
}

func (p *IsFriendResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IsFriendResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FollowSB(ctx context.Context, Req *interaction.FollowActionRequest) (r *interaction.FollowActionResponse, err error) {
	var _args FollowSBArgs
	_args.Req = Req
	var _result FollowSBResult
	if err = p.c.Call(ctx, "FollowSB", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowList(ctx context.Context, Req *interaction.FollowListRequest) (r *interaction.FollowListResponse, err error) {
	var _args FollowListArgs
	_args.Req = Req
	var _result FollowListResult
	if err = p.c.Call(ctx, "FollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FansList(ctx context.Context, Req *interaction.FansListRequest) (r *interaction.FansListResponse, err error) {
	var _args FansListArgs
	_args.Req = Req
	var _result FansListResult
	if err = p.c.Call(ctx, "FansList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FriendList(ctx context.Context, Req *interaction.FriendListRequest) (r *interaction.FriendListResponse, err error) {
	var _args FriendListArgs
	_args.Req = Req
	var _result FriendListResult
	if err = p.c.Call(ctx, "FriendList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IsFollowTarget(ctx context.Context, Req *interaction.IsFollowTargetRequest) (r *interaction.IsFollowTargetResponse, err error) {
	var _args IsFollowTargetArgs
	_args.Req = Req
	var _result IsFollowTargetResult
	if err = p.c.Call(ctx, "IsFollowTarget", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IsFollowManyTargets(ctx context.Context, Req *interaction.IsFollowManyTargetsRequest) (r *interaction.IsFollowManyTargetsResponse, err error) {
	var _args IsFollowManyTargetsArgs
	_args.Req = Req
	var _result IsFollowManyTargetsResult
	if err = p.c.Call(ctx, "IsFollowManyTargets", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IsFriend(ctx context.Context, Req *interaction.IsFriendRequest) (r *interaction.IsFriendResponse, err error) {
	var _args IsFriendArgs
	_args.Req = Req
	var _result IsFriendResult
	if err = p.c.Call(ctx, "IsFriend", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
