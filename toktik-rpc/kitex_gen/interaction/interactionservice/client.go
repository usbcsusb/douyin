// Code generated by Kitex v0.6.2. DO NOT EDIT.

package interactionservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	interaction "toktik-rpc/kitex_gen/interaction"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	FollowSB(ctx context.Context, Req *interaction.FollowActionRequest, callOptions ...callopt.Option) (r *interaction.FollowActionResponse, err error)
	FollowList(ctx context.Context, Req *interaction.FollowListRequest, callOptions ...callopt.Option) (r *interaction.FollowListResponse, err error)
	FansList(ctx context.Context, Req *interaction.FansListRequest, callOptions ...callopt.Option) (r *interaction.FansListResponse, err error)
	FriendList(ctx context.Context, Req *interaction.FriendListRequest, callOptions ...callopt.Option) (r *interaction.FriendListResponse, err error)
	IsFollowTarget(ctx context.Context, Req *interaction.IsFollowTargetRequest, callOptions ...callopt.Option) (r *interaction.IsFollowTargetResponse, err error)
	IsFollowManyTargets(ctx context.Context, Req *interaction.IsFollowManyTargetsRequest, callOptions ...callopt.Option) (r *interaction.IsFollowManyTargetsResponse, err error)
	IsFriend(ctx context.Context, Req *interaction.IsFriendRequest, callOptions ...callopt.Option) (r *interaction.IsFriendResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kInteractionServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kInteractionServiceClient struct {
	*kClient
}

func (p *kInteractionServiceClient) FollowSB(ctx context.Context, Req *interaction.FollowActionRequest, callOptions ...callopt.Option) (r *interaction.FollowActionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FollowSB(ctx, Req)
}

func (p *kInteractionServiceClient) FollowList(ctx context.Context, Req *interaction.FollowListRequest, callOptions ...callopt.Option) (r *interaction.FollowListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FollowList(ctx, Req)
}

func (p *kInteractionServiceClient) FansList(ctx context.Context, Req *interaction.FansListRequest, callOptions ...callopt.Option) (r *interaction.FansListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FansList(ctx, Req)
}

func (p *kInteractionServiceClient) FriendList(ctx context.Context, Req *interaction.FriendListRequest, callOptions ...callopt.Option) (r *interaction.FriendListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FriendList(ctx, Req)
}

func (p *kInteractionServiceClient) IsFollowTarget(ctx context.Context, Req *interaction.IsFollowTargetRequest, callOptions ...callopt.Option) (r *interaction.IsFollowTargetResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.IsFollowTarget(ctx, Req)
}

func (p *kInteractionServiceClient) IsFollowManyTargets(ctx context.Context, Req *interaction.IsFollowManyTargetsRequest, callOptions ...callopt.Option) (r *interaction.IsFollowManyTargetsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.IsFollowManyTargets(ctx, Req)
}

func (p *kInteractionServiceClient) IsFriend(ctx context.Context, Req *interaction.IsFriendRequest, callOptions ...callopt.Option) (r *interaction.IsFriendResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.IsFriend(ctx, Req)
}
