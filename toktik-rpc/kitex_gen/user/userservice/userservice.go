// Code generated by Kitex v0.6.2. DO NOT EDIT.

package userservice

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
	user "toktik-rpc/kitex_gen/user"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*user.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Register":                kitex.NewMethodInfo(registerHandler, newRegisterArgs, newRegisterResult, false),
		"Login":                   kitex.NewMethodInfo(loginHandler, newLoginArgs, newLoginResult, false),
		"TokenVerify":             kitex.NewMethodInfo(tokenVerifyHandler, newTokenVerifyArgs, newTokenVerifyResult, false),
		"UserIndex":               kitex.NewMethodInfo(userIndexHandler, newUserIndexArgs, newUserIndexResult, false),
		"AddFollowCount":          kitex.NewMethodInfo(addFollowCountHandler, newAddFollowCountArgs, newAddFollowCountResult, false),
		"SubFollowCount":          kitex.NewMethodInfo(subFollowCountHandler, newSubFollowCountArgs, newSubFollowCountResult, false),
		"GetUserList":             kitex.NewMethodInfo(getUserListHandler, newGetUserListArgs, newGetUserListResult, false),
		"AddUserWorkCount":        kitex.NewMethodInfo(addUserWorkCountHandler, newAddUserWorkCountArgs, newAddUserWorkCountResult, false),
		"UpdateUserFavoriteCount": kitex.NewMethodInfo(updateUserFavoriteCountHandler, newUpdateUserFavoriteCountArgs, newUpdateUserFavoriteCountResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.RegisterRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).Register(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *RegisterArgs:
		success, err := handler.(user.UserService).Register(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RegisterResult)
		realResult.Success = success
	}
	return nil
}
func newRegisterArgs() interface{} {
	return &RegisterArgs{}
}

func newRegisterResult() interface{} {
	return &RegisterResult{}
}

type RegisterArgs struct {
	Req *user.RegisterRequest
}

func (p *RegisterArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.RegisterRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RegisterArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RegisterArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RegisterArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in RegisterArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *RegisterArgs) Unmarshal(in []byte) error {
	msg := new(user.RegisterRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RegisterArgs_Req_DEFAULT *user.RegisterRequest

func (p *RegisterArgs) GetReq() *user.RegisterRequest {
	if !p.IsSetReq() {
		return RegisterArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RegisterArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RegisterArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RegisterResult struct {
	Success *user.RegisterResponse
}

var RegisterResult_Success_DEFAULT *user.RegisterResponse

func (p *RegisterResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.RegisterResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RegisterResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RegisterResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RegisterResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in RegisterResult")
	}
	return proto.Marshal(p.Success)
}

func (p *RegisterResult) Unmarshal(in []byte) error {
	msg := new(user.RegisterResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RegisterResult) GetSuccess() *user.RegisterResponse {
	if !p.IsSetSuccess() {
		return RegisterResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RegisterResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.RegisterResponse)
}

func (p *RegisterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RegisterResult) GetResult() interface{} {
	return p.Success
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.LoginRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).Login(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *LoginArgs:
		success, err := handler.(user.UserService).Login(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*LoginResult)
		realResult.Success = success
	}
	return nil
}
func newLoginArgs() interface{} {
	return &LoginArgs{}
}

func newLoginResult() interface{} {
	return &LoginResult{}
}

type LoginArgs struct {
	Req *user.LoginRequest
}

func (p *LoginArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.LoginRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *LoginArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *LoginArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *LoginArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in LoginArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *LoginArgs) Unmarshal(in []byte) error {
	msg := new(user.LoginRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var LoginArgs_Req_DEFAULT *user.LoginRequest

func (p *LoginArgs) GetReq() *user.LoginRequest {
	if !p.IsSetReq() {
		return LoginArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *LoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LoginArgs) GetFirstArgument() interface{} {
	return p.Req
}

type LoginResult struct {
	Success *user.LoginResponse
}

var LoginResult_Success_DEFAULT *user.LoginResponse

func (p *LoginResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.LoginResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *LoginResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *LoginResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *LoginResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in LoginResult")
	}
	return proto.Marshal(p.Success)
}

func (p *LoginResult) Unmarshal(in []byte) error {
	msg := new(user.LoginResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *LoginResult) GetSuccess() *user.LoginResponse {
	if !p.IsSetSuccess() {
		return LoginResult_Success_DEFAULT
	}
	return p.Success
}

func (p *LoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.LoginResponse)
}

func (p *LoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LoginResult) GetResult() interface{} {
	return p.Success
}

func tokenVerifyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.TokenVerifyRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).TokenVerify(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *TokenVerifyArgs:
		success, err := handler.(user.UserService).TokenVerify(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*TokenVerifyResult)
		realResult.Success = success
	}
	return nil
}
func newTokenVerifyArgs() interface{} {
	return &TokenVerifyArgs{}
}

func newTokenVerifyResult() interface{} {
	return &TokenVerifyResult{}
}

type TokenVerifyArgs struct {
	Req *user.TokenVerifyRequest
}

func (p *TokenVerifyArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.TokenVerifyRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *TokenVerifyArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *TokenVerifyArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *TokenVerifyArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in TokenVerifyArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *TokenVerifyArgs) Unmarshal(in []byte) error {
	msg := new(user.TokenVerifyRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var TokenVerifyArgs_Req_DEFAULT *user.TokenVerifyRequest

func (p *TokenVerifyArgs) GetReq() *user.TokenVerifyRequest {
	if !p.IsSetReq() {
		return TokenVerifyArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *TokenVerifyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TokenVerifyArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TokenVerifyResult struct {
	Success *user.TokenVerifyResponse
}

var TokenVerifyResult_Success_DEFAULT *user.TokenVerifyResponse

func (p *TokenVerifyResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.TokenVerifyResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *TokenVerifyResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *TokenVerifyResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *TokenVerifyResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in TokenVerifyResult")
	}
	return proto.Marshal(p.Success)
}

func (p *TokenVerifyResult) Unmarshal(in []byte) error {
	msg := new(user.TokenVerifyResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *TokenVerifyResult) GetSuccess() *user.TokenVerifyResponse {
	if !p.IsSetSuccess() {
		return TokenVerifyResult_Success_DEFAULT
	}
	return p.Success
}

func (p *TokenVerifyResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.TokenVerifyResponse)
}

func (p *TokenVerifyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TokenVerifyResult) GetResult() interface{} {
	return p.Success
}

func userIndexHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UserIndexRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).UserIndex(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UserIndexArgs:
		success, err := handler.(user.UserService).UserIndex(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UserIndexResult)
		realResult.Success = success
	}
	return nil
}
func newUserIndexArgs() interface{} {
	return &UserIndexArgs{}
}

func newUserIndexResult() interface{} {
	return &UserIndexResult{}
}

type UserIndexArgs struct {
	Req *user.UserIndexRequest
}

func (p *UserIndexArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.UserIndexRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UserIndexArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UserIndexArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UserIndexArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in UserIndexArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *UserIndexArgs) Unmarshal(in []byte) error {
	msg := new(user.UserIndexRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UserIndexArgs_Req_DEFAULT *user.UserIndexRequest

func (p *UserIndexArgs) GetReq() *user.UserIndexRequest {
	if !p.IsSetReq() {
		return UserIndexArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UserIndexArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserIndexArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UserIndexResult struct {
	Success *user.UserIndexResponse
}

var UserIndexResult_Success_DEFAULT *user.UserIndexResponse

func (p *UserIndexResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.UserIndexResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UserIndexResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UserIndexResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UserIndexResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in UserIndexResult")
	}
	return proto.Marshal(p.Success)
}

func (p *UserIndexResult) Unmarshal(in []byte) error {
	msg := new(user.UserIndexResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UserIndexResult) GetSuccess() *user.UserIndexResponse {
	if !p.IsSetSuccess() {
		return UserIndexResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UserIndexResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UserIndexResponse)
}

func (p *UserIndexResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserIndexResult) GetResult() interface{} {
	return p.Success
}

func addFollowCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.AddFollowCountRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).AddFollowCount(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *AddFollowCountArgs:
		success, err := handler.(user.UserService).AddFollowCount(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AddFollowCountResult)
		realResult.Success = success
	}
	return nil
}
func newAddFollowCountArgs() interface{} {
	return &AddFollowCountArgs{}
}

func newAddFollowCountResult() interface{} {
	return &AddFollowCountResult{}
}

type AddFollowCountArgs struct {
	Req *user.AddFollowCountRequest
}

func (p *AddFollowCountArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.AddFollowCountRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AddFollowCountArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AddFollowCountArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AddFollowCountArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in AddFollowCountArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *AddFollowCountArgs) Unmarshal(in []byte) error {
	msg := new(user.AddFollowCountRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AddFollowCountArgs_Req_DEFAULT *user.AddFollowCountRequest

func (p *AddFollowCountArgs) GetReq() *user.AddFollowCountRequest {
	if !p.IsSetReq() {
		return AddFollowCountArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AddFollowCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AddFollowCountArgs) GetFirstArgument() interface{} {
	return p.Req
}

type AddFollowCountResult struct {
	Success *user.AddFollowCountResponse
}

var AddFollowCountResult_Success_DEFAULT *user.AddFollowCountResponse

func (p *AddFollowCountResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.AddFollowCountResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AddFollowCountResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AddFollowCountResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AddFollowCountResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in AddFollowCountResult")
	}
	return proto.Marshal(p.Success)
}

func (p *AddFollowCountResult) Unmarshal(in []byte) error {
	msg := new(user.AddFollowCountResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AddFollowCountResult) GetSuccess() *user.AddFollowCountResponse {
	if !p.IsSetSuccess() {
		return AddFollowCountResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AddFollowCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.AddFollowCountResponse)
}

func (p *AddFollowCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AddFollowCountResult) GetResult() interface{} {
	return p.Success
}

func subFollowCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.SubFollowCountRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).SubFollowCount(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SubFollowCountArgs:
		success, err := handler.(user.UserService).SubFollowCount(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SubFollowCountResult)
		realResult.Success = success
	}
	return nil
}
func newSubFollowCountArgs() interface{} {
	return &SubFollowCountArgs{}
}

func newSubFollowCountResult() interface{} {
	return &SubFollowCountResult{}
}

type SubFollowCountArgs struct {
	Req *user.SubFollowCountRequest
}

func (p *SubFollowCountArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.SubFollowCountRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SubFollowCountArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SubFollowCountArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SubFollowCountArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in SubFollowCountArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *SubFollowCountArgs) Unmarshal(in []byte) error {
	msg := new(user.SubFollowCountRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SubFollowCountArgs_Req_DEFAULT *user.SubFollowCountRequest

func (p *SubFollowCountArgs) GetReq() *user.SubFollowCountRequest {
	if !p.IsSetReq() {
		return SubFollowCountArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SubFollowCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SubFollowCountArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SubFollowCountResult struct {
	Success *user.SubFollowCountResponse
}

var SubFollowCountResult_Success_DEFAULT *user.SubFollowCountResponse

func (p *SubFollowCountResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.SubFollowCountResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SubFollowCountResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SubFollowCountResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SubFollowCountResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in SubFollowCountResult")
	}
	return proto.Marshal(p.Success)
}

func (p *SubFollowCountResult) Unmarshal(in []byte) error {
	msg := new(user.SubFollowCountResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SubFollowCountResult) GetSuccess() *user.SubFollowCountResponse {
	if !p.IsSetSuccess() {
		return SubFollowCountResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SubFollowCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.SubFollowCountResponse)
}

func (p *SubFollowCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SubFollowCountResult) GetResult() interface{} {
	return p.Success
}

func getUserListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.GetUserListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).GetUserList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetUserListArgs:
		success, err := handler.(user.UserService).GetUserList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserListResult)
		realResult.Success = success
	}
	return nil
}
func newGetUserListArgs() interface{} {
	return &GetUserListArgs{}
}

func newGetUserListResult() interface{} {
	return &GetUserListResult{}
}

type GetUserListArgs struct {
	Req *user.GetUserListRequest
}

func (p *GetUserListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.GetUserListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetUserListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetUserListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetUserListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetUserListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserListArgs) Unmarshal(in []byte) error {
	msg := new(user.GetUserListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserListArgs_Req_DEFAULT *user.GetUserListRequest

func (p *GetUserListArgs) GetReq() *user.GetUserListRequest {
	if !p.IsSetReq() {
		return GetUserListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetUserListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetUserListResult struct {
	Success *user.GetUserListResponse
}

var GetUserListResult_Success_DEFAULT *user.GetUserListResponse

func (p *GetUserListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.GetUserListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetUserListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetUserListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetUserListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetUserListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserListResult) Unmarshal(in []byte) error {
	msg := new(user.GetUserListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserListResult) GetSuccess() *user.GetUserListResponse {
	if !p.IsSetSuccess() {
		return GetUserListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserListResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.GetUserListResponse)
}

func (p *GetUserListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetUserListResult) GetResult() interface{} {
	return p.Success
}

func addUserWorkCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.AddUserWorkCountRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).AddUserWorkCount(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *AddUserWorkCountArgs:
		success, err := handler.(user.UserService).AddUserWorkCount(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AddUserWorkCountResult)
		realResult.Success = success
	}
	return nil
}
func newAddUserWorkCountArgs() interface{} {
	return &AddUserWorkCountArgs{}
}

func newAddUserWorkCountResult() interface{} {
	return &AddUserWorkCountResult{}
}

type AddUserWorkCountArgs struct {
	Req *user.AddUserWorkCountRequest
}

func (p *AddUserWorkCountArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.AddUserWorkCountRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AddUserWorkCountArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AddUserWorkCountArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AddUserWorkCountArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in AddUserWorkCountArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *AddUserWorkCountArgs) Unmarshal(in []byte) error {
	msg := new(user.AddUserWorkCountRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AddUserWorkCountArgs_Req_DEFAULT *user.AddUserWorkCountRequest

func (p *AddUserWorkCountArgs) GetReq() *user.AddUserWorkCountRequest {
	if !p.IsSetReq() {
		return AddUserWorkCountArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AddUserWorkCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AddUserWorkCountArgs) GetFirstArgument() interface{} {
	return p.Req
}

type AddUserWorkCountResult struct {
	Success *user.AddUserWorkCountResponse
}

var AddUserWorkCountResult_Success_DEFAULT *user.AddUserWorkCountResponse

func (p *AddUserWorkCountResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.AddUserWorkCountResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AddUserWorkCountResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AddUserWorkCountResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AddUserWorkCountResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in AddUserWorkCountResult")
	}
	return proto.Marshal(p.Success)
}

func (p *AddUserWorkCountResult) Unmarshal(in []byte) error {
	msg := new(user.AddUserWorkCountResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AddUserWorkCountResult) GetSuccess() *user.AddUserWorkCountResponse {
	if !p.IsSetSuccess() {
		return AddUserWorkCountResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AddUserWorkCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.AddUserWorkCountResponse)
}

func (p *AddUserWorkCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AddUserWorkCountResult) GetResult() interface{} {
	return p.Success
}

func updateUserFavoriteCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UpdateUserFavoriteCountRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).UpdateUserFavoriteCount(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdateUserFavoriteCountArgs:
		success, err := handler.(user.UserService).UpdateUserFavoriteCount(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateUserFavoriteCountResult)
		realResult.Success = success
	}
	return nil
}
func newUpdateUserFavoriteCountArgs() interface{} {
	return &UpdateUserFavoriteCountArgs{}
}

func newUpdateUserFavoriteCountResult() interface{} {
	return &UpdateUserFavoriteCountResult{}
}

type UpdateUserFavoriteCountArgs struct {
	Req *user.UpdateUserFavoriteCountRequest
}

func (p *UpdateUserFavoriteCountArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.UpdateUserFavoriteCountRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateUserFavoriteCountArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateUserFavoriteCountArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateUserFavoriteCountArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in UpdateUserFavoriteCountArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateUserFavoriteCountArgs) Unmarshal(in []byte) error {
	msg := new(user.UpdateUserFavoriteCountRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateUserFavoriteCountArgs_Req_DEFAULT *user.UpdateUserFavoriteCountRequest

func (p *UpdateUserFavoriteCountArgs) GetReq() *user.UpdateUserFavoriteCountRequest {
	if !p.IsSetReq() {
		return UpdateUserFavoriteCountArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateUserFavoriteCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateUserFavoriteCountArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateUserFavoriteCountResult struct {
	Success *user.UpdateUserFavoriteCountResponse
}

var UpdateUserFavoriteCountResult_Success_DEFAULT *user.UpdateUserFavoriteCountResponse

func (p *UpdateUserFavoriteCountResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.UpdateUserFavoriteCountResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateUserFavoriteCountResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateUserFavoriteCountResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateUserFavoriteCountResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in UpdateUserFavoriteCountResult")
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateUserFavoriteCountResult) Unmarshal(in []byte) error {
	msg := new(user.UpdateUserFavoriteCountResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateUserFavoriteCountResult) GetSuccess() *user.UpdateUserFavoriteCountResponse {
	if !p.IsSetSuccess() {
		return UpdateUserFavoriteCountResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateUserFavoriteCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UpdateUserFavoriteCountResponse)
}

func (p *UpdateUserFavoriteCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateUserFavoriteCountResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Register(ctx context.Context, Req *user.RegisterRequest) (r *user.RegisterResponse, err error) {
	var _args RegisterArgs
	_args.Req = Req
	var _result RegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Login(ctx context.Context, Req *user.LoginRequest) (r *user.LoginResponse, err error) {
	var _args LoginArgs
	_args.Req = Req
	var _result LoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) TokenVerify(ctx context.Context, Req *user.TokenVerifyRequest) (r *user.TokenVerifyResponse, err error) {
	var _args TokenVerifyArgs
	_args.Req = Req
	var _result TokenVerifyResult
	if err = p.c.Call(ctx, "TokenVerify", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserIndex(ctx context.Context, Req *user.UserIndexRequest) (r *user.UserIndexResponse, err error) {
	var _args UserIndexArgs
	_args.Req = Req
	var _result UserIndexResult
	if err = p.c.Call(ctx, "UserIndex", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddFollowCount(ctx context.Context, Req *user.AddFollowCountRequest) (r *user.AddFollowCountResponse, err error) {
	var _args AddFollowCountArgs
	_args.Req = Req
	var _result AddFollowCountResult
	if err = p.c.Call(ctx, "AddFollowCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SubFollowCount(ctx context.Context, Req *user.SubFollowCountRequest) (r *user.SubFollowCountResponse, err error) {
	var _args SubFollowCountArgs
	_args.Req = Req
	var _result SubFollowCountResult
	if err = p.c.Call(ctx, "SubFollowCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserList(ctx context.Context, Req *user.GetUserListRequest) (r *user.GetUserListResponse, err error) {
	var _args GetUserListArgs
	_args.Req = Req
	var _result GetUserListResult
	if err = p.c.Call(ctx, "GetUserList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddUserWorkCount(ctx context.Context, Req *user.AddUserWorkCountRequest) (r *user.AddUserWorkCountResponse, err error) {
	var _args AddUserWorkCountArgs
	_args.Req = Req
	var _result AddUserWorkCountResult
	if err = p.c.Call(ctx, "AddUserWorkCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateUserFavoriteCount(ctx context.Context, Req *user.UpdateUserFavoriteCountRequest) (r *user.UpdateUserFavoriteCountResponse, err error) {
	var _args UpdateUserFavoriteCountArgs
	_args.Req = Req
	var _result UpdateUserFavoriteCountResult
	if err = p.c.Call(ctx, "UpdateUserFavoriteCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
