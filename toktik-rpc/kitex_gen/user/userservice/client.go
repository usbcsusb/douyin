// Code generated by Kitex v0.6.2. DO NOT EDIT.

package userservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	user "toktik-rpc/kitex_gen/user"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Register(ctx context.Context, Req *user.RegisterRequest, callOptions ...callopt.Option) (r *user.RegisterResponse, err error)
	Login(ctx context.Context, Req *user.LoginRequest, callOptions ...callopt.Option) (r *user.LoginResponse, err error)
	TokenVerify(ctx context.Context, Req *user.TokenVerifyRequest, callOptions ...callopt.Option) (r *user.TokenVerifyResponse, err error)
	UserIndex(ctx context.Context, Req *user.UserIndexRequest, callOptions ...callopt.Option) (r *user.UserIndexResponse, err error)
	AddFollowCount(ctx context.Context, Req *user.AddFollowCountRequest, callOptions ...callopt.Option) (r *user.AddFollowCountResponse, err error)
	SubFollowCount(ctx context.Context, Req *user.SubFollowCountRequest, callOptions ...callopt.Option) (r *user.SubFollowCountResponse, err error)
	GetUserList(ctx context.Context, Req *user.GetUserListRequest, callOptions ...callopt.Option) (r *user.GetUserListResponse, err error)
	AddUserWorkCount(ctx context.Context, Req *user.AddUserWorkCountRequest, callOptions ...callopt.Option) (r *user.AddUserWorkCountResponse, err error)
	UpdateUserFavoriteCount(ctx context.Context, Req *user.UpdateUserFavoriteCountRequest, callOptions ...callopt.Option) (r *user.UpdateUserFavoriteCountResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kUserServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kUserServiceClient struct {
	*kClient
}

func (p *kUserServiceClient) Register(ctx context.Context, Req *user.RegisterRequest, callOptions ...callopt.Option) (r *user.RegisterResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Register(ctx, Req)
}

func (p *kUserServiceClient) Login(ctx context.Context, Req *user.LoginRequest, callOptions ...callopt.Option) (r *user.LoginResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Login(ctx, Req)
}

func (p *kUserServiceClient) TokenVerify(ctx context.Context, Req *user.TokenVerifyRequest, callOptions ...callopt.Option) (r *user.TokenVerifyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.TokenVerify(ctx, Req)
}

func (p *kUserServiceClient) UserIndex(ctx context.Context, Req *user.UserIndexRequest, callOptions ...callopt.Option) (r *user.UserIndexResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UserIndex(ctx, Req)
}

func (p *kUserServiceClient) AddFollowCount(ctx context.Context, Req *user.AddFollowCountRequest, callOptions ...callopt.Option) (r *user.AddFollowCountResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddFollowCount(ctx, Req)
}

func (p *kUserServiceClient) SubFollowCount(ctx context.Context, Req *user.SubFollowCountRequest, callOptions ...callopt.Option) (r *user.SubFollowCountResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SubFollowCount(ctx, Req)
}

func (p *kUserServiceClient) GetUserList(ctx context.Context, Req *user.GetUserListRequest, callOptions ...callopt.Option) (r *user.GetUserListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserList(ctx, Req)
}

func (p *kUserServiceClient) AddUserWorkCount(ctx context.Context, Req *user.AddUserWorkCountRequest, callOptions ...callopt.Option) (r *user.AddUserWorkCountResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddUserWorkCount(ctx, Req)
}

func (p *kUserServiceClient) UpdateUserFavoriteCount(ctx context.Context, Req *user.UpdateUserFavoriteCountRequest, callOptions ...callopt.Option) (r *user.UpdateUserFavoriteCountResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateUserFavoriteCount(ctx, Req)
}
