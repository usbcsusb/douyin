// Code generated by Kitex v0.6.2. DO NOT EDIT.

package chatservice

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
	chat "toktik-rpc/kitex_gen/chat"
)

func serviceInfo() *kitex.ServiceInfo {
	return chatServiceServiceInfo
}

var chatServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ChatService"
	handlerType := (*chat.ChatService)(nil)
	methods := map[string]kitex.MethodInfo{
		"MessageList":            kitex.NewMethodInfo(messageListHandler, newMessageListArgs, newMessageListResult, false),
		"ChatAction":             kitex.NewMethodInfo(chatActionHandler, newChatActionArgs, newChatActionResult, false),
		"GetFriendLatestMessage": kitex.NewMethodInfo(getFriendLatestMessageHandler, newGetFriendLatestMessageArgs, newGetFriendLatestMessageResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "chat",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func messageListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(chat.MessageListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(chat.ChatService).MessageList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *MessageListArgs:
		success, err := handler.(chat.ChatService).MessageList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MessageListResult)
		realResult.Success = success
	}
	return nil
}
func newMessageListArgs() interface{} {
	return &MessageListArgs{}
}

func newMessageListResult() interface{} {
	return &MessageListResult{}
}

type MessageListArgs struct {
	Req *chat.MessageListRequest
}

func (p *MessageListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(chat.MessageListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MessageListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MessageListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MessageListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in MessageListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *MessageListArgs) Unmarshal(in []byte) error {
	msg := new(chat.MessageListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MessageListArgs_Req_DEFAULT *chat.MessageListRequest

func (p *MessageListArgs) GetReq() *chat.MessageListRequest {
	if !p.IsSetReq() {
		return MessageListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MessageListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MessageListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MessageListResult struct {
	Success *chat.MessageListResponse
}

var MessageListResult_Success_DEFAULT *chat.MessageListResponse

func (p *MessageListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(chat.MessageListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MessageListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MessageListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MessageListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in MessageListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *MessageListResult) Unmarshal(in []byte) error {
	msg := new(chat.MessageListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MessageListResult) GetSuccess() *chat.MessageListResponse {
	if !p.IsSetSuccess() {
		return MessageListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MessageListResult) SetSuccess(x interface{}) {
	p.Success = x.(*chat.MessageListResponse)
}

func (p *MessageListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MessageListResult) GetResult() interface{} {
	return p.Success
}

func chatActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(chat.ChatActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(chat.ChatService).ChatAction(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ChatActionArgs:
		success, err := handler.(chat.ChatService).ChatAction(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ChatActionResult)
		realResult.Success = success
	}
	return nil
}
func newChatActionArgs() interface{} {
	return &ChatActionArgs{}
}

func newChatActionResult() interface{} {
	return &ChatActionResult{}
}

type ChatActionArgs struct {
	Req *chat.ChatActionRequest
}

func (p *ChatActionArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(chat.ChatActionRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ChatActionArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ChatActionArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ChatActionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ChatActionArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ChatActionArgs) Unmarshal(in []byte) error {
	msg := new(chat.ChatActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ChatActionArgs_Req_DEFAULT *chat.ChatActionRequest

func (p *ChatActionArgs) GetReq() *chat.ChatActionRequest {
	if !p.IsSetReq() {
		return ChatActionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ChatActionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ChatActionArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ChatActionResult struct {
	Success *chat.ChatActionResponse
}

var ChatActionResult_Success_DEFAULT *chat.ChatActionResponse

func (p *ChatActionResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(chat.ChatActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ChatActionResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ChatActionResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ChatActionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ChatActionResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ChatActionResult) Unmarshal(in []byte) error {
	msg := new(chat.ChatActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ChatActionResult) GetSuccess() *chat.ChatActionResponse {
	if !p.IsSetSuccess() {
		return ChatActionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ChatActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*chat.ChatActionResponse)
}

func (p *ChatActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChatActionResult) GetResult() interface{} {
	return p.Success
}

func getFriendLatestMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(chat.GetFriendLatestMessageRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(chat.ChatService).GetFriendLatestMessage(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFriendLatestMessageArgs:
		success, err := handler.(chat.ChatService).GetFriendLatestMessage(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFriendLatestMessageResult)
		realResult.Success = success
	}
	return nil
}
func newGetFriendLatestMessageArgs() interface{} {
	return &GetFriendLatestMessageArgs{}
}

func newGetFriendLatestMessageResult() interface{} {
	return &GetFriendLatestMessageResult{}
}

type GetFriendLatestMessageArgs struct {
	Req *chat.GetFriendLatestMessageRequest
}

func (p *GetFriendLatestMessageArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(chat.GetFriendLatestMessageRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFriendLatestMessageArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFriendLatestMessageArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFriendLatestMessageArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetFriendLatestMessageArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetFriendLatestMessageArgs) Unmarshal(in []byte) error {
	msg := new(chat.GetFriendLatestMessageRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFriendLatestMessageArgs_Req_DEFAULT *chat.GetFriendLatestMessageRequest

func (p *GetFriendLatestMessageArgs) GetReq() *chat.GetFriendLatestMessageRequest {
	if !p.IsSetReq() {
		return GetFriendLatestMessageArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFriendLatestMessageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetFriendLatestMessageArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetFriendLatestMessageResult struct {
	Success *chat.GetFriendLatestMessageResponse
}

var GetFriendLatestMessageResult_Success_DEFAULT *chat.GetFriendLatestMessageResponse

func (p *GetFriendLatestMessageResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(chat.GetFriendLatestMessageResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFriendLatestMessageResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFriendLatestMessageResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFriendLatestMessageResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetFriendLatestMessageResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetFriendLatestMessageResult) Unmarshal(in []byte) error {
	msg := new(chat.GetFriendLatestMessageResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFriendLatestMessageResult) GetSuccess() *chat.GetFriendLatestMessageResponse {
	if !p.IsSetSuccess() {
		return GetFriendLatestMessageResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFriendLatestMessageResult) SetSuccess(x interface{}) {
	p.Success = x.(*chat.GetFriendLatestMessageResponse)
}

func (p *GetFriendLatestMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFriendLatestMessageResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) MessageList(ctx context.Context, Req *chat.MessageListRequest) (r *chat.MessageListResponse, err error) {
	var _args MessageListArgs
	_args.Req = Req
	var _result MessageListResult
	if err = p.c.Call(ctx, "MessageList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ChatAction(ctx context.Context, Req *chat.ChatActionRequest) (r *chat.ChatActionResponse, err error) {
	var _args ChatActionArgs
	_args.Req = Req
	var _result ChatActionResult
	if err = p.c.Call(ctx, "ChatAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFriendLatestMessage(ctx context.Context, Req *chat.GetFriendLatestMessageRequest) (r *chat.GetFriendLatestMessageResponse, err error) {
	var _args GetFriendLatestMessageArgs
	_args.Req = Req
	var _result GetFriendLatestMessageResult
	if err = p.c.Call(ctx, "GetFriendLatestMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
