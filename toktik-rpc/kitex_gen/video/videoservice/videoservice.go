// Code generated by Kitex v0.6.2. DO NOT EDIT.

package videoservice

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
	video "toktik-rpc/kitex_gen/video"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

var videoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*video.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"VideoFeed":             kitex.NewMethodInfo(videoFeedHandler, newVideoFeedArgs, newVideoFeedResult, false),
		"VideoPublish":          kitex.NewMethodInfo(videoPublishHandler, newVideoPublishArgs, newVideoPublishResult, false),
		"PublishList":           kitex.NewMethodInfo(publishListHandler, newPublishListArgs, newPublishListResult, false),
		"GetVideoInfo":          kitex.NewMethodInfo(getVideoInfoHandler, newGetVideoInfoArgs, newGetVideoInfoResult, false),
		"GetManyVideoInfos":     kitex.NewMethodInfo(getManyVideoInfosHandler, newGetManyVideoInfosArgs, newGetManyVideoInfosResult, false),
		"AddVideoFavoriteCount": kitex.NewMethodInfo(addVideoFavoriteCountHandler, newAddVideoFavoriteCountArgs, newAddVideoFavoriteCountResult, false),
		"SubVideoFavoriteCount": kitex.NewMethodInfo(subVideoFavoriteCountHandler, newSubVideoFavoriteCountArgs, newSubVideoFavoriteCountResult, false),
		"AddVideoCommentCount":  kitex.NewMethodInfo(addVideoCommentCountHandler, newAddVideoCommentCountArgs, newAddVideoCommentCountResult, false),
		"SubVideoCommentCount":  kitex.NewMethodInfo(subVideoCommentCountHandler, newSubVideoCommentCountArgs, newSubVideoCommentCountResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "video",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func videoFeedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(video.VideoFeedRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(video.VideoService).VideoFeed(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *VideoFeedArgs:
		success, err := handler.(video.VideoService).VideoFeed(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*VideoFeedResult)
		realResult.Success = success
	}
	return nil
}
func newVideoFeedArgs() interface{} {
	return &VideoFeedArgs{}
}

func newVideoFeedResult() interface{} {
	return &VideoFeedResult{}
}

type VideoFeedArgs struct {
	Req *video.VideoFeedRequest
}

func (p *VideoFeedArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(video.VideoFeedRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *VideoFeedArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *VideoFeedArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *VideoFeedArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in VideoFeedArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *VideoFeedArgs) Unmarshal(in []byte) error {
	msg := new(video.VideoFeedRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var VideoFeedArgs_Req_DEFAULT *video.VideoFeedRequest

func (p *VideoFeedArgs) GetReq() *video.VideoFeedRequest {
	if !p.IsSetReq() {
		return VideoFeedArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *VideoFeedArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoFeedArgs) GetFirstArgument() interface{} {
	return p.Req
}

type VideoFeedResult struct {
	Success *video.VideoFeedResponse
}

var VideoFeedResult_Success_DEFAULT *video.VideoFeedResponse

func (p *VideoFeedResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(video.VideoFeedResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *VideoFeedResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *VideoFeedResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *VideoFeedResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in VideoFeedResult")
	}
	return proto.Marshal(p.Success)
}

func (p *VideoFeedResult) Unmarshal(in []byte) error {
	msg := new(video.VideoFeedResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *VideoFeedResult) GetSuccess() *video.VideoFeedResponse {
	if !p.IsSetSuccess() {
		return VideoFeedResult_Success_DEFAULT
	}
	return p.Success
}

func (p *VideoFeedResult) SetSuccess(x interface{}) {
	p.Success = x.(*video.VideoFeedResponse)
}

func (p *VideoFeedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoFeedResult) GetResult() interface{} {
	return p.Success
}

func videoPublishHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(video.VideoPublishRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(video.VideoService).VideoPublish(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *VideoPublishArgs:
		success, err := handler.(video.VideoService).VideoPublish(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*VideoPublishResult)
		realResult.Success = success
	}
	return nil
}
func newVideoPublishArgs() interface{} {
	return &VideoPublishArgs{}
}

func newVideoPublishResult() interface{} {
	return &VideoPublishResult{}
}

type VideoPublishArgs struct {
	Req *video.VideoPublishRequest
}

func (p *VideoPublishArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(video.VideoPublishRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *VideoPublishArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *VideoPublishArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *VideoPublishArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in VideoPublishArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *VideoPublishArgs) Unmarshal(in []byte) error {
	msg := new(video.VideoPublishRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var VideoPublishArgs_Req_DEFAULT *video.VideoPublishRequest

func (p *VideoPublishArgs) GetReq() *video.VideoPublishRequest {
	if !p.IsSetReq() {
		return VideoPublishArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *VideoPublishArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoPublishArgs) GetFirstArgument() interface{} {
	return p.Req
}

type VideoPublishResult struct {
	Success *video.VideoPublishResponse
}

var VideoPublishResult_Success_DEFAULT *video.VideoPublishResponse

func (p *VideoPublishResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(video.VideoPublishResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *VideoPublishResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *VideoPublishResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *VideoPublishResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in VideoPublishResult")
	}
	return proto.Marshal(p.Success)
}

func (p *VideoPublishResult) Unmarshal(in []byte) error {
	msg := new(video.VideoPublishResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *VideoPublishResult) GetSuccess() *video.VideoPublishResponse {
	if !p.IsSetSuccess() {
		return VideoPublishResult_Success_DEFAULT
	}
	return p.Success
}

func (p *VideoPublishResult) SetSuccess(x interface{}) {
	p.Success = x.(*video.VideoPublishResponse)
}

func (p *VideoPublishResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoPublishResult) GetResult() interface{} {
	return p.Success
}

func publishListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(video.PublishListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(video.VideoService).PublishList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *PublishListArgs:
		success, err := handler.(video.VideoService).PublishList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*PublishListResult)
		realResult.Success = success
	}
	return nil
}
func newPublishListArgs() interface{} {
	return &PublishListArgs{}
}

func newPublishListResult() interface{} {
	return &PublishListResult{}
}

type PublishListArgs struct {
	Req *video.PublishListRequest
}

func (p *PublishListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(video.PublishListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *PublishListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *PublishListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *PublishListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in PublishListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *PublishListArgs) Unmarshal(in []byte) error {
	msg := new(video.PublishListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var PublishListArgs_Req_DEFAULT *video.PublishListRequest

func (p *PublishListArgs) GetReq() *video.PublishListRequest {
	if !p.IsSetReq() {
		return PublishListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *PublishListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PublishListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type PublishListResult struct {
	Success *video.PublishListResponse
}

var PublishListResult_Success_DEFAULT *video.PublishListResponse

func (p *PublishListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(video.PublishListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *PublishListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *PublishListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *PublishListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in PublishListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *PublishListResult) Unmarshal(in []byte) error {
	msg := new(video.PublishListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *PublishListResult) GetSuccess() *video.PublishListResponse {
	if !p.IsSetSuccess() {
		return PublishListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *PublishListResult) SetSuccess(x interface{}) {
	p.Success = x.(*video.PublishListResponse)
}

func (p *PublishListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PublishListResult) GetResult() interface{} {
	return p.Success
}

func getVideoInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(video.GetVideoInfoRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(video.VideoService).GetVideoInfo(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetVideoInfoArgs:
		success, err := handler.(video.VideoService).GetVideoInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetVideoInfoResult)
		realResult.Success = success
	}
	return nil
}
func newGetVideoInfoArgs() interface{} {
	return &GetVideoInfoArgs{}
}

func newGetVideoInfoResult() interface{} {
	return &GetVideoInfoResult{}
}

type GetVideoInfoArgs struct {
	Req *video.GetVideoInfoRequest
}

func (p *GetVideoInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(video.GetVideoInfoRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetVideoInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetVideoInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetVideoInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetVideoInfoArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetVideoInfoArgs) Unmarshal(in []byte) error {
	msg := new(video.GetVideoInfoRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetVideoInfoArgs_Req_DEFAULT *video.GetVideoInfoRequest

func (p *GetVideoInfoArgs) GetReq() *video.GetVideoInfoRequest {
	if !p.IsSetReq() {
		return GetVideoInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetVideoInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetVideoInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetVideoInfoResult struct {
	Success *video.GetVideoInfoResponse
}

var GetVideoInfoResult_Success_DEFAULT *video.GetVideoInfoResponse

func (p *GetVideoInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(video.GetVideoInfoResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetVideoInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetVideoInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetVideoInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetVideoInfoResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetVideoInfoResult) Unmarshal(in []byte) error {
	msg := new(video.GetVideoInfoResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetVideoInfoResult) GetSuccess() *video.GetVideoInfoResponse {
	if !p.IsSetSuccess() {
		return GetVideoInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetVideoInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*video.GetVideoInfoResponse)
}

func (p *GetVideoInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetVideoInfoResult) GetResult() interface{} {
	return p.Success
}

func getManyVideoInfosHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(video.GetManyVideoInfosRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(video.VideoService).GetManyVideoInfos(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetManyVideoInfosArgs:
		success, err := handler.(video.VideoService).GetManyVideoInfos(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetManyVideoInfosResult)
		realResult.Success = success
	}
	return nil
}
func newGetManyVideoInfosArgs() interface{} {
	return &GetManyVideoInfosArgs{}
}

func newGetManyVideoInfosResult() interface{} {
	return &GetManyVideoInfosResult{}
}

type GetManyVideoInfosArgs struct {
	Req *video.GetManyVideoInfosRequest
}

func (p *GetManyVideoInfosArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(video.GetManyVideoInfosRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetManyVideoInfosArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetManyVideoInfosArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetManyVideoInfosArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetManyVideoInfosArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetManyVideoInfosArgs) Unmarshal(in []byte) error {
	msg := new(video.GetManyVideoInfosRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetManyVideoInfosArgs_Req_DEFAULT *video.GetManyVideoInfosRequest

func (p *GetManyVideoInfosArgs) GetReq() *video.GetManyVideoInfosRequest {
	if !p.IsSetReq() {
		return GetManyVideoInfosArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetManyVideoInfosArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetManyVideoInfosArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetManyVideoInfosResult struct {
	Success *video.GetManyVideoInfosResponse
}

var GetManyVideoInfosResult_Success_DEFAULT *video.GetManyVideoInfosResponse

func (p *GetManyVideoInfosResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(video.GetManyVideoInfosResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetManyVideoInfosResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetManyVideoInfosResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetManyVideoInfosResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetManyVideoInfosResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetManyVideoInfosResult) Unmarshal(in []byte) error {
	msg := new(video.GetManyVideoInfosResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetManyVideoInfosResult) GetSuccess() *video.GetManyVideoInfosResponse {
	if !p.IsSetSuccess() {
		return GetManyVideoInfosResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetManyVideoInfosResult) SetSuccess(x interface{}) {
	p.Success = x.(*video.GetManyVideoInfosResponse)
}

func (p *GetManyVideoInfosResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetManyVideoInfosResult) GetResult() interface{} {
	return p.Success
}

func addVideoFavoriteCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(video.AddVideoFavoriteCountRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(video.VideoService).AddVideoFavoriteCount(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *AddVideoFavoriteCountArgs:
		success, err := handler.(video.VideoService).AddVideoFavoriteCount(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AddVideoFavoriteCountResult)
		realResult.Success = success
	}
	return nil
}
func newAddVideoFavoriteCountArgs() interface{} {
	return &AddVideoFavoriteCountArgs{}
}

func newAddVideoFavoriteCountResult() interface{} {
	return &AddVideoFavoriteCountResult{}
}

type AddVideoFavoriteCountArgs struct {
	Req *video.AddVideoFavoriteCountRequest
}

func (p *AddVideoFavoriteCountArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(video.AddVideoFavoriteCountRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AddVideoFavoriteCountArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AddVideoFavoriteCountArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AddVideoFavoriteCountArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in AddVideoFavoriteCountArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *AddVideoFavoriteCountArgs) Unmarshal(in []byte) error {
	msg := new(video.AddVideoFavoriteCountRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AddVideoFavoriteCountArgs_Req_DEFAULT *video.AddVideoFavoriteCountRequest

func (p *AddVideoFavoriteCountArgs) GetReq() *video.AddVideoFavoriteCountRequest {
	if !p.IsSetReq() {
		return AddVideoFavoriteCountArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AddVideoFavoriteCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AddVideoFavoriteCountArgs) GetFirstArgument() interface{} {
	return p.Req
}

type AddVideoFavoriteCountResult struct {
	Success *video.AddVideoFavoriteCountResponse
}

var AddVideoFavoriteCountResult_Success_DEFAULT *video.AddVideoFavoriteCountResponse

func (p *AddVideoFavoriteCountResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(video.AddVideoFavoriteCountResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AddVideoFavoriteCountResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AddVideoFavoriteCountResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AddVideoFavoriteCountResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in AddVideoFavoriteCountResult")
	}
	return proto.Marshal(p.Success)
}

func (p *AddVideoFavoriteCountResult) Unmarshal(in []byte) error {
	msg := new(video.AddVideoFavoriteCountResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AddVideoFavoriteCountResult) GetSuccess() *video.AddVideoFavoriteCountResponse {
	if !p.IsSetSuccess() {
		return AddVideoFavoriteCountResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AddVideoFavoriteCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*video.AddVideoFavoriteCountResponse)
}

func (p *AddVideoFavoriteCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AddVideoFavoriteCountResult) GetResult() interface{} {
	return p.Success
}

func subVideoFavoriteCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(video.SubVideoFavoriteCountRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(video.VideoService).SubVideoFavoriteCount(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SubVideoFavoriteCountArgs:
		success, err := handler.(video.VideoService).SubVideoFavoriteCount(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SubVideoFavoriteCountResult)
		realResult.Success = success
	}
	return nil
}
func newSubVideoFavoriteCountArgs() interface{} {
	return &SubVideoFavoriteCountArgs{}
}

func newSubVideoFavoriteCountResult() interface{} {
	return &SubVideoFavoriteCountResult{}
}

type SubVideoFavoriteCountArgs struct {
	Req *video.SubVideoFavoriteCountRequest
}

func (p *SubVideoFavoriteCountArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(video.SubVideoFavoriteCountRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SubVideoFavoriteCountArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SubVideoFavoriteCountArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SubVideoFavoriteCountArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in SubVideoFavoriteCountArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *SubVideoFavoriteCountArgs) Unmarshal(in []byte) error {
	msg := new(video.SubVideoFavoriteCountRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SubVideoFavoriteCountArgs_Req_DEFAULT *video.SubVideoFavoriteCountRequest

func (p *SubVideoFavoriteCountArgs) GetReq() *video.SubVideoFavoriteCountRequest {
	if !p.IsSetReq() {
		return SubVideoFavoriteCountArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SubVideoFavoriteCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SubVideoFavoriteCountArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SubVideoFavoriteCountResult struct {
	Success *video.SubVideoFavoriteCountResponse
}

var SubVideoFavoriteCountResult_Success_DEFAULT *video.SubVideoFavoriteCountResponse

func (p *SubVideoFavoriteCountResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(video.SubVideoFavoriteCountResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SubVideoFavoriteCountResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SubVideoFavoriteCountResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SubVideoFavoriteCountResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in SubVideoFavoriteCountResult")
	}
	return proto.Marshal(p.Success)
}

func (p *SubVideoFavoriteCountResult) Unmarshal(in []byte) error {
	msg := new(video.SubVideoFavoriteCountResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SubVideoFavoriteCountResult) GetSuccess() *video.SubVideoFavoriteCountResponse {
	if !p.IsSetSuccess() {
		return SubVideoFavoriteCountResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SubVideoFavoriteCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*video.SubVideoFavoriteCountResponse)
}

func (p *SubVideoFavoriteCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SubVideoFavoriteCountResult) GetResult() interface{} {
	return p.Success
}

func addVideoCommentCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(video.AddVideoCommentCountRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(video.VideoService).AddVideoCommentCount(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *AddVideoCommentCountArgs:
		success, err := handler.(video.VideoService).AddVideoCommentCount(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AddVideoCommentCountResult)
		realResult.Success = success
	}
	return nil
}
func newAddVideoCommentCountArgs() interface{} {
	return &AddVideoCommentCountArgs{}
}

func newAddVideoCommentCountResult() interface{} {
	return &AddVideoCommentCountResult{}
}

type AddVideoCommentCountArgs struct {
	Req *video.AddVideoCommentCountRequest
}

func (p *AddVideoCommentCountArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(video.AddVideoCommentCountRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AddVideoCommentCountArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AddVideoCommentCountArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AddVideoCommentCountArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in AddVideoCommentCountArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *AddVideoCommentCountArgs) Unmarshal(in []byte) error {
	msg := new(video.AddVideoCommentCountRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AddVideoCommentCountArgs_Req_DEFAULT *video.AddVideoCommentCountRequest

func (p *AddVideoCommentCountArgs) GetReq() *video.AddVideoCommentCountRequest {
	if !p.IsSetReq() {
		return AddVideoCommentCountArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AddVideoCommentCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AddVideoCommentCountArgs) GetFirstArgument() interface{} {
	return p.Req
}

type AddVideoCommentCountResult struct {
	Success *video.AddVideoCommentCountResponse
}

var AddVideoCommentCountResult_Success_DEFAULT *video.AddVideoCommentCountResponse

func (p *AddVideoCommentCountResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(video.AddVideoCommentCountResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AddVideoCommentCountResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AddVideoCommentCountResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AddVideoCommentCountResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in AddVideoCommentCountResult")
	}
	return proto.Marshal(p.Success)
}

func (p *AddVideoCommentCountResult) Unmarshal(in []byte) error {
	msg := new(video.AddVideoCommentCountResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AddVideoCommentCountResult) GetSuccess() *video.AddVideoCommentCountResponse {
	if !p.IsSetSuccess() {
		return AddVideoCommentCountResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AddVideoCommentCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*video.AddVideoCommentCountResponse)
}

func (p *AddVideoCommentCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AddVideoCommentCountResult) GetResult() interface{} {
	return p.Success
}

func subVideoCommentCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(video.SubVideoCommentCountRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(video.VideoService).SubVideoCommentCount(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SubVideoCommentCountArgs:
		success, err := handler.(video.VideoService).SubVideoCommentCount(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SubVideoCommentCountResult)
		realResult.Success = success
	}
	return nil
}
func newSubVideoCommentCountArgs() interface{} {
	return &SubVideoCommentCountArgs{}
}

func newSubVideoCommentCountResult() interface{} {
	return &SubVideoCommentCountResult{}
}

type SubVideoCommentCountArgs struct {
	Req *video.SubVideoCommentCountRequest
}

func (p *SubVideoCommentCountArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(video.SubVideoCommentCountRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SubVideoCommentCountArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SubVideoCommentCountArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SubVideoCommentCountArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in SubVideoCommentCountArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *SubVideoCommentCountArgs) Unmarshal(in []byte) error {
	msg := new(video.SubVideoCommentCountRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SubVideoCommentCountArgs_Req_DEFAULT *video.SubVideoCommentCountRequest

func (p *SubVideoCommentCountArgs) GetReq() *video.SubVideoCommentCountRequest {
	if !p.IsSetReq() {
		return SubVideoCommentCountArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SubVideoCommentCountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SubVideoCommentCountArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SubVideoCommentCountResult struct {
	Success *video.SubVideoCommentCountResponse
}

var SubVideoCommentCountResult_Success_DEFAULT *video.SubVideoCommentCountResponse

func (p *SubVideoCommentCountResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(video.SubVideoCommentCountResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SubVideoCommentCountResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SubVideoCommentCountResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SubVideoCommentCountResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in SubVideoCommentCountResult")
	}
	return proto.Marshal(p.Success)
}

func (p *SubVideoCommentCountResult) Unmarshal(in []byte) error {
	msg := new(video.SubVideoCommentCountResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SubVideoCommentCountResult) GetSuccess() *video.SubVideoCommentCountResponse {
	if !p.IsSetSuccess() {
		return SubVideoCommentCountResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SubVideoCommentCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*video.SubVideoCommentCountResponse)
}

func (p *SubVideoCommentCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SubVideoCommentCountResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) VideoFeed(ctx context.Context, Req *video.VideoFeedRequest) (r *video.VideoFeedResponse, err error) {
	var _args VideoFeedArgs
	_args.Req = Req
	var _result VideoFeedResult
	if err = p.c.Call(ctx, "VideoFeed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoPublish(ctx context.Context, Req *video.VideoPublishRequest) (r *video.VideoPublishResponse, err error) {
	var _args VideoPublishArgs
	_args.Req = Req
	var _result VideoPublishResult
	if err = p.c.Call(ctx, "VideoPublish", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishList(ctx context.Context, Req *video.PublishListRequest) (r *video.PublishListResponse, err error) {
	var _args PublishListArgs
	_args.Req = Req
	var _result PublishListResult
	if err = p.c.Call(ctx, "PublishList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideoInfo(ctx context.Context, Req *video.GetVideoInfoRequest) (r *video.GetVideoInfoResponse, err error) {
	var _args GetVideoInfoArgs
	_args.Req = Req
	var _result GetVideoInfoResult
	if err = p.c.Call(ctx, "GetVideoInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetManyVideoInfos(ctx context.Context, Req *video.GetManyVideoInfosRequest) (r *video.GetManyVideoInfosResponse, err error) {
	var _args GetManyVideoInfosArgs
	_args.Req = Req
	var _result GetManyVideoInfosResult
	if err = p.c.Call(ctx, "GetManyVideoInfos", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddVideoFavoriteCount(ctx context.Context, Req *video.AddVideoFavoriteCountRequest) (r *video.AddVideoFavoriteCountResponse, err error) {
	var _args AddVideoFavoriteCountArgs
	_args.Req = Req
	var _result AddVideoFavoriteCountResult
	if err = p.c.Call(ctx, "AddVideoFavoriteCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SubVideoFavoriteCount(ctx context.Context, Req *video.SubVideoFavoriteCountRequest) (r *video.SubVideoFavoriteCountResponse, err error) {
	var _args SubVideoFavoriteCountArgs
	_args.Req = Req
	var _result SubVideoFavoriteCountResult
	if err = p.c.Call(ctx, "SubVideoFavoriteCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddVideoCommentCount(ctx context.Context, Req *video.AddVideoCommentCountRequest) (r *video.AddVideoCommentCountResponse, err error) {
	var _args AddVideoCommentCountArgs
	_args.Req = Req
	var _result AddVideoCommentCountResult
	if err = p.c.Call(ctx, "AddVideoCommentCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SubVideoCommentCount(ctx context.Context, Req *video.SubVideoCommentCountRequest) (r *video.SubVideoCommentCountResponse, err error) {
	var _args SubVideoCommentCountArgs
	_args.Req = Req
	var _result SubVideoCommentCountResult
	if err = p.c.Call(ctx, "SubVideoCommentCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
